<!DOCTYPE html>
<html lang="en" data-bs-theme="auto">

<head>
    <base href="{{Site.BasePath}}">
    <title>{{ Page.Title }} - {{ Site.Title }}</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    
    <!-- Color mode toggler - theme initialization moved to body script for better organization -->
    
    <!-- Noto Color Emoji font for cross-platform emoji support -->
    <link href="https://fonts.googleapis.com/css2?family=Noto+Color+Emoji&display=swap" rel="stylesheet">
    
    <!-- Highlight.js -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css">

    <style>
        :root {
            --bs-body-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji", sans-serif;
            --bs-link-color-rgb: 8, 87, 168;
            --bs-link-hover-color-rgb: 6, 68, 130;
        }

        body {
            font-family: var(--bs-body-font-family);
        }

        .sidebar {
            position: sticky;
            top: 56px; /* Height of navbar */
            height: calc(100vh - 56px);
            overflow-y: auto;
            background-color: var(--bs-secondary-bg);
            border-right: 1px solid var(--bs-border-color);
            padding-top: 1rem;
        }

        .toc-sidebar {
            position: sticky;
            top: 56px; /* Height of navbar */
            height: calc(100vh - 56px);
            overflow-y: auto;
            padding-top: 1rem;
        }
        
        .toc-sidebar .offcanvas-body {
            display: flex;
            flex-direction: column;
            padding: 1rem;
        }
        
        .toc-sidebar .toc-title {
            margin-bottom: 1rem;
            flex-shrink: 0;
        }

        /* Responsive offcanvas for md breakpoint */
        @media (max-width: 767.98px) {
            .offcanvas-md {
                position: fixed;
                bottom: 0;
                z-index: 1045;
                display: flex;
                flex-direction: column;
                max-width: 100%;
                visibility: hidden;
                background-color: var(--bs-body-bg);
                background-clip: padding-box;
                outline: 0;
                transition: transform .15s ease-in-out;
            }
            
            .offcanvas-md.offcanvas-start {
                top: 0;
                left: 0;
                width: 280px;
                border-right: 1px solid var(--bs-border-color);
                transform: translateX(-100%);
            }
            
            .offcanvas-md.offcanvas-end {
                top: 0;
                right: 0;
                width: 300px;
                border-left: 1px solid var(--bs-border-color);
                transform: translateX(100%);
            }
            
            .offcanvas-md.showing,
            .offcanvas-md.show {
                transform: none;
            }
            
            .offcanvas-md.show {
                visibility: visible;
            }
        }
        
        @media (min-width: 768px) {
            .offcanvas-md {
                position: static !important;
                z-index: auto !important;
                flex-grow: 1 !important;
                visibility: visible !important;
                background-color: transparent !important;
                border: 0 !important;
                transform: none !important;
                transition: none !important;
            }
        }
        
        @media (min-width: 992px) {
            #toc {
                display: block !important;
            }
        }
        
        
        /* Remove extra whitespace above content on mobile */
        @media (max-width: 767.98px) {
            main.content {
                padding-top: 0.5rem !important;
            }
            
            /* Hide mobile control buttons when offcanvas is shown */
            .offcanvas-md.show ~ .content .d-md-none {
                display: none !important;
            }
        }

        .toc-toggle {
            display: none;
        }

        @media (max-width: 991.98px) {
            .toc-toggle {
                display: inline-block;
            }
        }

        .sidebar .nav-link {
            font-size: 0.9rem;
            color: var(--bs-body-color);
            border-radius: 0.375rem;
        }

        .sidebar .nav-link.active {
            background-color: var(--bs-primary);
            color: white;
            font-weight: 500;
        }
        
        .sidebar .nav-link:hover {
            color: var(--bs-link-color);
            background-color: var(--bs-tertiary-bg);
        }

        /* Ensure emojis render properly in navigation */
        .sidebar .nav-link {
            font-feature-settings: "liga" on, "clig" on;
            text-rendering: optimizeLegibility;
        }

        /* Ensure emojis have proper font fallback */
        .sidebar .nav-link {
            font-family: var(--bs-body-font-family);
        }
        
        .toc-sidebar .nav {
            flex-direction: column !important;
            width: 100%;
        }
        
        .toc-sidebar .nav-link {
            font-size: 0.8rem;
            color: var(--bs-secondary-color);
            padding-top: 0.25rem;
            padding-bottom: 0.25rem;
            display: block;
            width: 100%;
        }

        .toc-sidebar .nav-link:hover {
            color: var(--bs-body-color);
        }

        .toc-sidebar .nav-link.active {
            font-weight: 600;
            color: var(--bs-body-color);
            border-left: 2px solid var(--bs-link-color);
        }

        blockquote {
            font-size: 1rem;
            border-left: 4px solid var(--bs-border-color);
            padding-left: 1rem;
            color: var(--bs-secondary-color);
        }
        
        /* Focus visible for better accessibility */
        .btn:focus-visible,
        .nav-link:focus-visible,
        .dropdown-item:focus-visible {
            outline: 2px solid var(--bs-primary);
            outline-offset: 2px;
        }
        
        /* Smooth transitions for theme switching */
        body {
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        
        .sidebar,
        .toc-sidebar {
            transition: background-color 0.3s ease, border-color 0.3s ease;
        }

        .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 {
            font-weight: 600;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
        }

        .content h2, .content h3 {
            scroll-margin-top: 80px;
        }

        /* Adjust code block styling to match highlight.js theme */
        pre code.hljs {
            border-radius: 0.3rem;
        }
        
        /* Theme switcher styles */
        .theme-icon-active {
            display: inline-block !important;
        }
    </style>
</head>

<body>
    <!-- SVG Icons for theme switcher -->
    <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
        <symbol id="check2" viewBox="0 0 16 16">
            <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
        </symbol>
        <symbol id="circle-half" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 0 8 1v14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z"/>
        </symbol>
        <symbol id="moon-stars-fill" viewBox="0 0 16 16">
            <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"/>
            <path d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.734 1.734 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.734 1.734 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.734 1.734 0 0 0 1.097-1.097l.387-1.162zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L13.863.1z"/>
        </symbol>
        <symbol id="sun-fill" viewBox="0 0 16 16">
            <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>
        </symbol>
    </svg>
    <nav class="navbar navbar-expand-lg sticky-top" data-bs-theme="dark" style="background-color: var(--bs-primary);">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">{{Site.Title}}</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    {{#sections Section.Version}}
                        <li class="nav-item">
                            <a class="nav-link" href="{{#xref IndexPage}}{{url}}{{/xref}}">{{Title}}</a>
                        </li>
                    {{/sections}}
                </ul>
                <ul class="navbar-nav">
                    {{#if Site.Definition.Homepage.Enabled}}
                    <li class="nav-item">
                        <a class="nav-link" href="{{Site.Definition.Homepage.Url}}" target="{{Site.Definition.Homepage.Target}}" rel="noopener">{{Site.Definition.Homepage.Text}}</a>
                    </li>
                    {{/if}}
                    <li class="nav-item dropdown">
                        <button class="btn btn-link nav-link py-2 px-0 px-lg-2 dropdown-toggle d-flex align-items-center" id="bd-theme" type="button" aria-expanded="false" data-bs-toggle="dropdown" data-bs-display="static" aria-label="Toggle theme (auto)">
                            <svg class="bi my-1 theme-icon-active" width="16" height="16"><use href="#circle-half"></use></svg>
                            <span class="d-lg-none ms-2" id="bd-theme-text">Toggle theme</span>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="bd-theme-text">
                            <li>
                                <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="light" aria-pressed="false">
                                    <svg class="bi me-2 opacity-50 theme-icon" width="16" height="16"><use href="#sun-fill"></use></svg>
                                    Light
                                    <svg class="bi ms-auto d-none" width="16" height="16"><use href="#check2"></use></svg>
                                </button>
                            </li>
                            <li>
                                <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="dark" aria-pressed="false">
                                    <svg class="bi me-2 opacity-50 theme-icon" width="16" height="16"><use href="#moon-stars-fill"></use></svg>
                                    Dark
                                    <svg class="bi ms-auto d-none" width="16" height="16"><use href="#check2"></use></svg>
                                </button>
                            </li>
                            <li>
                                <button type="button" class="dropdown-item d-flex align-items-center active" data-bs-theme-value="auto" aria-pressed="true">
                                    <svg class="bi me-2 opacity-50 theme-icon" width="16" height="16"><use href="#circle-half"></use></svg>
                                    Auto
                                    <svg class="bi ms-auto d-none" width="16" height="16"><use href="#check2"></use></svg>
                                </button>
                            </li>
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            {{Section.Version}}
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            {{#versions}}
                                <li><a class="dropdown-item" href="{{../Site.BasePath}}{{Version}}">{{Version}}</a></li>
                            {{/versions}}
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container-fluid">
        <div class="row g-0">
            <nav id="sidebar" class="col-md-3 col-lg-2 d-md-block sidebar offcanvas-md offcanvas-start" tabindex="-1" data-bs-scroll="true" data-bs-backdrop="true" aria-label="Main navigation">
                <div class="offcanvas-header d-lg-none">
                    <h5 class="offcanvas-title">Navigation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" data-bs-target="#sidebar" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    {{>partials/Navigation.hbs}}
                </div>
            </nav>
            <main class="col-md-9 col-lg-7 px-md-4 py-3 content d-flex flex-column" role="main">
                <!-- Mobile and medium screen navigation controls -->
                <div class="mb-3">
                    <button class="btn btn-sm btn-outline-primary me-2 d-md-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#sidebar" aria-controls="sidebar">
                        <svg width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"/>
                        </svg>
                        <span class="ms-1">Menu</span>
                    </button>
                    <button class="btn btn-sm btn-outline-secondary toc-toggle d-none d-md-block d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#toc" aria-controls="toc">
                        <svg width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"/>
                        </svg>
                        <span class="ms-1">On this page</span>
                    </button>
                </div>
                {{{PageHtml}}}
            </main>
            <!-- Single responsive TOC -->
            <nav id="toc" class="col-lg-3 toc-sidebar offcanvas-md offcanvas-end" tabindex="-1" data-bs-scroll="true" data-bs-backdrop="true" aria-label="Table of contents" style="display: none">
                <div class="offcanvas-header d-lg-none">
                    <h5 class="offcanvas-title">On this page</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" data-bs-target="#toc" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <strong class="d-block h6 my-2 pb-2 border-bottom toc-title">On this page</strong>
                    <nav class="nav flex-column"></nav>
                </div>
            </nav>
        </div>
    </div>
    
    <!-- Bootstrap 5 JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    
    <!-- Highlight.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
    <script>hljs.highlightAll();</script>

    <script>
        (function() {

            // Left sidebar active link
            const sidebar = document.querySelector('.sidebar');
            if (sidebar) {
                const baseHref = document.baseURI;
                const currentPageHref = window.location.href.split('#')[0]; // Ignore hash
                let currentPagePath = currentPageHref.substring(baseHref.length);

                if (currentPagePath.endsWith('/')) {
                    currentPagePath = currentPagePath.slice(0, -1);
                }

                const navLinks = sidebar.querySelectorAll('a.nav-link');
                navLinks.forEach(link => {
                    const linkHref = link.getAttribute('href');
                    if (linkHref && (linkHref === currentPagePath || linkHref === currentPagePath + '/index.html')) {
                        link.classList.add('active');

                        let parentCollapse = link.closest('.collapse');
                        while(parentCollapse) {
                            parentCollapse.classList.add('show');
                            const trigger = document.querySelector(`a[data-bs-toggle="collapse"][href="#${parentCollapse.id}"]`);
                            if (trigger) {
                                trigger.setAttribute('aria-expanded', 'true');
                                trigger.classList.remove('collapsed');
                            }
                            parentCollapse = parentCollapse.parentElement.closest('.collapse');
                        }
                    }
                });
            }

            // "On this page" TOC script - single responsive TOC
            const toc = document.getElementById('toc');
            const tocToggle = document.getElementById('toc-toggle');
            
            // Constants
            const SCROLL_OFFSET = 100;
            const SCROLL_THROTTLE_MS = 25; // Optimized from 10ms
            const SCROLL_NAVIGATION_TIMEOUT_MS = 200;
            const MOBILE_BREAKPOINT = 768; // Bootstrap md breakpoint
            
            if (toc) {
                const mainContent = document.querySelector('.content');
                if (!mainContent) return;
                
                const headings = mainContent.querySelectorAll('h2, h3');
                const tocNav = toc.querySelector('.offcanvas-body .nav');
                
                if (!tocNav) return;
                
                if (headings.length > 0) {
                    let isScrolling = false;
                    
                    // Create TOC links
                    headings.forEach((heading, index) => {
                        const id = 'heading-' + index;
                        if (!heading.getAttribute('id')) {
                            heading.setAttribute('id', id);
                        }

                        const link = document.createElement('a');
                        link.classList.add('nav-link');
                        if (heading.tagName === 'H3') {
                            link.classList.add('ms-3'); // Indent H3
                        }
                        
                        const href = '#' + id;
                        link.setAttribute('href', href);
                        link.textContent = heading.textContent;

                        link.addEventListener('click', (e) => {
                            e.preventDefault();
                            
                            // Temporarily disable scroll tracking during navigation
                            isScrolling = true;
                            
                            // Remove active class from all TOC links
                            tocNav.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                            
                            // Add active class to clicked link
                            link.classList.add('active');
                            
                            // On mobile, collapse the TOC after clicking a link
                            if (window.innerWidth < MOBILE_BREAKPOINT && toc) {
                                toc.classList.add('collapsed');
                                if (tocToggle) {
                                    updateToggleButton(true);
                                }
                            }
                            
                            // Navigate to the hash
                            window.location.hash = href;
                            
                            // Re-enable scroll tracking after navigation completes
                            let scrollTimeout;
                            const handleScroll = () => {
                                clearTimeout(scrollTimeout);
                                scrollTimeout = setTimeout(() => {
                                    window.removeEventListener('scroll', handleScroll);
                                    isScrolling = false;
                                }, SCROLL_NAVIGATION_TIMEOUT_MS);
                            };
                            
                            window.addEventListener('scroll', handleScroll);
                            
                            // Fallback: re-enable after 1 second
                            setTimeout(() => {
                                window.removeEventListener('scroll', handleScroll);
                                isScrolling = false;
                            }, 1000);
                        });
                        
                        tocNav.appendChild(link);
                    });

                    // Update toggle button appearance
                    const updateToggleButton = (isCollapsed) => {
                        if (!tocToggle) return;
                        
                        if (isCollapsed) {
                            tocToggle.innerHTML = `<svg width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"/>
                            </svg><span class="ms-1">On this page</span>`;
                        } else {
                            tocToggle.innerHTML = `<svg width="16" height="16" fill="currentColor" class="bi bi-chevron-up" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                            </svg><span class="ms-1">Hide</span>`;
                        }
                    };

                    // Set initial active state based on current scroll position or hash
                    const setInitialActiveState = () => {
                        const hash = window.location.hash;
                        if (hash && tocNav) {
                            const targetLink = tocNav.querySelector(`a[href="${hash}"]`);
                            if (targetLink) {
                                tocNav.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                                targetLink.classList.add('active');
                                return;
                            }
                        }
                        
                        // Find the currently visible heading
                        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                        let activeHeading = null;
                        
                        for (let i = 0; i < headings.length; i++) {
                            const heading = headings[i];
                            const rect = heading.getBoundingClientRect();
                            const headingTop = rect.top + scrollTop;
                            
                            if (headingTop <= scrollTop + SCROLL_OFFSET) {
                                activeHeading = heading;
                            } else {
                                break;
                            }
                        }
                        
                        if (activeHeading && tocNav) {
                            const activeId = activeHeading.getAttribute('id');
                            const activeLink = tocNav.querySelector(`a[href="#${activeId}"]`);
                            if (activeLink) {
                                tocNav.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                                activeLink.classList.add('active');
                            }
                        } else if (tocNav) {
                            // If no heading is visible, activate the first one
                            const firstLink = tocNav.querySelector('.nav-link');
                            if (firstLink) {
                                firstLink.classList.add('active');
                            }
                        }
                    };

                    // Set initial active state
                    setInitialActiveState();

                    // Optimized scroll tracking
                    const updateActiveOnScroll = () => {
                        if (isScrolling || !tocNav) return;
                        
                        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                        let activeHeading = null;
                        
                        for (let i = 0; i < headings.length; i++) {
                            const heading = headings[i];
                            const rect = heading.getBoundingClientRect();
                            const headingTop = rect.top + scrollTop;
                            
                            if (headingTop <= scrollTop + SCROLL_OFFSET) {
                                activeHeading = heading;
                            } else {
                                break;
                            }
                        }
                        
                        const currentActiveLink = tocNav.querySelector('.nav-link.active');
                        let newActiveLink = null;
                        
                        if (activeHeading) {
                            const activeId = activeHeading.getAttribute('id');
                            newActiveLink = tocNav.querySelector(`a[href="#${activeId}"]`);
                        } else {
                            newActiveLink = tocNav.querySelector('.nav-link');
                        }
                        
                        if (newActiveLink && newActiveLink !== currentActiveLink) {
                            tocNav.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                            newActiveLink.classList.add('active');
                        }
                    };
                    
                    // Throttled scroll listener
                    let scrollTimeout;
                    window.addEventListener('scroll', () => {
                        clearTimeout(scrollTimeout);
                        scrollTimeout = setTimeout(updateActiveOnScroll, SCROLL_THROTTLE_MS);
                    });

                    // Mobile TOC toggle functionality
                    if (tocToggle) {
                        tocToggle.addEventListener('click', () => {
                            const isCollapsed = toc.classList.contains('collapsed');
                            if (isCollapsed) {
                                toc.classList.remove('collapsed');
                                updateToggleButton(false);
                            } else {
                                toc.classList.add('collapsed');
                                updateToggleButton(true);
                            }
                        });
                    }
                } else {
                    // Hide TOC if no headings
                    toc.style.display = 'none';
                    if (tocToggle) tocToggle.style.display = 'none';
                }
            }

            // Auto-close offcanvas menus when navigation links are clicked on mobile
            // Reuse already declared sidebar and toc variables
            
            // Function to close offcanvas
            const closeOffcanvas = (element) => {
                const bsOffcanvas = bootstrap.Offcanvas.getInstance(element);
                if (bsOffcanvas) {
                    bsOffcanvas.hide();
                }
            };
            
            // Auto-close sidebar when navigation links are clicked
            if (sidebar) {
                const sidebarLinks = sidebar.querySelectorAll('a.nav-link');
                sidebarLinks.forEach(link => {
                    link.addEventListener('click', () => {
                        // Only auto-close on mobile
                        if (window.innerWidth < MOBILE_BREAKPOINT) {
                            closeOffcanvas(sidebar);
                        }
                    });
                });
            }
            
            // Auto-close TOC when TOC links are clicked
            if (toc) {
                const tocNav = toc.querySelector('.offcanvas-body .nav');
                if (tocNav) {
                    tocNav.addEventListener('click', (e) => {
                        if (e.target.tagName === 'A' && window.innerWidth < MOBILE_BREAKPOINT) {
                            closeOffcanvas(toc);
                        }
                    });
                }
            }

            if (window.location.hostname !== 'localhost') {
                return;
            }
            // Live reload script
            const port = window.location.port || (window.location.protocol === 'https:' ? '443' : '80');
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const socketUrl = `${protocol}//${window.location.hostname}:${port}/ws`;
            let socket;

            function connect() {
                socket = new WebSocket(socketUrl);
                socket.addEventListener('open', () => { console.log('Live reload connected.'); });
                socket.addEventListener('message', (event) => {
                    if (event.data === 'reload') {
                        console.log('Reloading page...');
                        window.location.reload();
                    }
                });
                socket.addEventListener('close', () => {
                    console.log('Live reload disconnected. Trying to reconnect in 2 seconds...');
                    setTimeout(connect, 2000);
                });
                socket.addEventListener('error', (err) => {
                    console.error('Live reload error:', err);
                    socket.close();
                });
            }
            connect();
        })();
        
        // Theme switcher functionality
        (() => {
            'use strict'
            
            const getStoredTheme = () => localStorage.getItem('theme')
            const setStoredTheme = theme => localStorage.setItem('theme', theme)
            
            const getPreferredTheme = () => {
                const storedTheme = getStoredTheme()
                if (storedTheme) {
                    return storedTheme
                }
                
                return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
            }
            
            const setTheme = theme => {
                if (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    document.documentElement.setAttribute('data-bs-theme', 'dark')
                } else {
                    document.documentElement.setAttribute('data-bs-theme', theme)
                }
            }
            
            const showActiveTheme = (theme, focus = false) => {
                const themeSwitcher = document.querySelector('#bd-theme')
                
                if (!themeSwitcher) {
                    return
                }
                
                const themeSwitcherText = document.querySelector('#bd-theme-text')
                const activeThemeIcon = document.querySelector('.theme-icon-active use')
                const btnToActive = document.querySelector(`[data-bs-theme-value="${theme}"]`)
                const svgOfActiveBtn = btnToActive.querySelector('svg use').getAttribute('href')
                
                document.querySelectorAll('[data-bs-theme-value]').forEach(element => {
                    element.classList.remove('active')
                    element.setAttribute('aria-pressed', 'false')
                })
                
                btnToActive.classList.add('active')
                btnToActive.setAttribute('aria-pressed', 'true')
                activeThemeIcon.setAttribute('href', svgOfActiveBtn)
                const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`
                themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)
                
                if (focus) {
                    themeSwitcher.focus()
                }
            }
            
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
                const storedTheme = getStoredTheme()
                if (storedTheme !== 'light' && storedTheme !== 'dark') {
                    setTheme(getPreferredTheme())
                }
            })
            
            window.addEventListener('DOMContentLoaded', () => {
                setTheme(getPreferredTheme())
                showActiveTheme(getPreferredTheme())
                
                document.querySelectorAll('[data-bs-theme-value]')
                    .forEach(toggle => {
                        toggle.addEventListener('click', () => {
                            const theme = toggle.getAttribute('data-bs-theme-value')
                            setStoredTheme(theme)
                            setTheme(theme)
                            showActiveTheme(theme, true)
                        })
                    })
            })
        })()
    </script>
</body>
</html>